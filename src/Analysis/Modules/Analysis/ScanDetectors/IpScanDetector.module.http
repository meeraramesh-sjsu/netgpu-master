/* 
	MODULE:IpScan detector
	TYPE: Analysis

	PrePreprocessor orders (ppp.sh): 

	###PATTERNS $IPSCAN_DETECTOR$ANALYSIS( 

*/

//#warning IpScan Analysis

#ifndef libAnalysisIpScan_h 
#define libAnalysisIpScan_h 

#include "../Thresholds/Thresholds.h"

typedef struct{
	uint32_t ipSrc;
	uint32_t ipDst;
	uint32_t counter;
	uint8_t protocol;
	uint8_t version;
	float rate;
	unsigned char * data;
	uint16_t sport;
	uint16_t dport;
}COMPOUND_NAME(ANALYSIS_NAME,ipScanAnalysis_t);

__device__ int indexCnt = 0;
#endif  //libAnalysisIpScan

/* Redefine TYPES */
#undef  ANALYSIS_INPUT_TYPE
#define ANALYSIS_INPUT_TYPE COMPOUND_NAME(ANALYSIS_NAME,ipScanAnalysis_t)
#ifdef __CUDACC__

#define $IPSCAN_DETECTOR$AUTO_MINE()\
	do{\
	 if(IS_ETHERNET() && IS_IP4() && IS_TCP()){\
                DATA_ELEMENT.ipSrc = GET_FIELD(IP4_HEADER.ip_src);\
                DATA_ELEMENT.ipDst = GET_FIELD(IP4_HEADER.ip_dst);\
		DATA_ELEMENT.protocol = GET_FIELD(IP4_HEADER.protocol);\
		DATA_ELEMENT.sport=GET_FIELD(TCP_HEADER.sport);\
		DATA_ELEMENT.dport=GET_FIELD(TCP_HEADER.dport);\
		DATA_ELEMENT.data=GET_FIELD(TCP_HEADER.data);\
}\
}while(0)
	
/***** IPSCAN DETECTOR ANALYSIS *****/
#define $IPSCAN_DETECTOR$ANALYSIS(threshold) \
	COMPOUND_NAME(ANALYSIS_NAME,ipScanAnalysisCode)(GPU_buffer,GPU_data,GPU_results,state,counter,threshold);\
	__syncthreads()

#define SHARED_BUFFER_SIZE MAX_BUFFER_PACKETS/ANALYSIS_TPB

template<typename T,typename R> 
__device__ __inline__ void COMPOUND_NAME(ANALYSIS_NAME,ipScanAnalysisCode)(packet_t* GPU_buffer, T* GPU_data, R* GPU_results, analysisState_t state,int *counter,int thresHold){

	/* Erases duplicates and counts elements inside block */
	
		
	__shared__ T elements[ANALYSIS_TPB];
 	 unsigned char *user_data; 
	unsigned char *it;  
	int indexVal=52;
	state.blockIterator = blockIdx.x;

		//Mine to shared
		elements[threadIdx.x] = cudaSafeGet(&GPU_data[state.blockIterator*blockDim.x+threadIdx.x]);
		//printf("Protocol number of the thread with threadId %d in block %d is %d \n", threadIdx.x,blockIdx.x, elements[threadIdx.x].protocol);
		if(elements[threadIdx.x].protocol==6) 
		{
		atomicAdd(&indexCnt,1);
	//	indexVal=elements[threadIdx.x].tcpstart+elements[threadIdx.x].tcpLen;	
		 user_data = (unsigned char *)((unsigned char *)elements[threadIdx.x].data );
 		if(elements[threadIdx.x].sport == 80 || elements[threadIdx.x].dport==80)
		{
		printf("Alas!! HTTP Packet");
		if(user_data!=NULL)	printf("user_data =");
		else printf("No User Data");
		for (it = user_data;it!=NULL && indexVal !=94 ;++indexVal) {
		printf("Printing user data");
		char c =*(char *)it;
		printf("%c",c);
		++it;
		}		
		}		
		}	
	__syncthreads();
		if(threadIdx.x==0){ printf("Value of counter = %d",indexCnt);} 
			
}


/***** END OF PORTSCAN DETECTOR ANALYSIS *****/


#endif //__CUDACC__
/* Redefine DATA_ELEMENT and RESULT_ELEMENT */
#undef DATA_ELEMENT
#define DATA_ELEMENT GPU_data[POS] 

#undef RESULT_ELEMENT
#define RESULT_ELEMENT GPU_results[POS] 



