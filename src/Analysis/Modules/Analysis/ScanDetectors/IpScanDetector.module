/* 
	MODULE:IpScan detector
	TYPE: Analysis

	PrePreprocessor orders (ppp.sh): 

	###PATTERNS $IPSCAN_DETECTOR$ANALYSIS( 

*/

//#warning IpScan Analysis

#ifndef libAnalysisIpScan_h 
#define libAnalysisIpScan_h 

#include "../Thresholds/Thresholds.h"
#include <inttypes.h>
#include <string>
#include <stdio.h>
using namespace std;
typedef struct{
	//IP
	uint16_t headerVertos; //Extra
	uint8_t headerLength;
	uint8_t version;
	uint8_t	 tos;		
	uint16_t totalLength;
	uint16_t identification;			
	uint16_t flagsAndOffset;
	uint16_t  ttlprotocol; //Extra
	uint16_t ip_srcFirstHalf; //Extra
	uint16_t ip_srcSecHalf; //Extra
	uint16_t ip_dstFirstHalf; //Extra
	uint16_t ip_dstSecHalf; //Extra
	uint8_t protocol;
	uint16_t checksum;
	uint32_t ipSrc;
	uint32_t ipDst;
	uint32_t ipSrcNetwork;
	uint32_t counter;
	uint8_t flags;
	uint8_t unused;
	uint8_t offset;
	float rate;
	uint16_t sport;
	uint16_t dport;
	uint32_t ack;
	int indexTcp;
	int indexUdp;
	int indexIcmp;
	int maliciousVer;
	int maliciousIP;
	int maliciousFlags;
	int maliciousReserved;
	int maliciousPort;
	int maliciousAck;
	int maliciousDst;
	int ipLen;
	int maliciousCheckSum;
	int size_ip; //= elements[threadIdx.x].headerLength*4;
	int size_tcp; //= elements[threadIdx.x].offset*4;
	int size_payload;
	const u_char * payload;
}COMPOUND_NAME(ANALYSIS_NAME,ipScanAnalysis_t);

/*__device__ int indexTcp = 0;
__device__ int indexUdp = 0;
__device__ int indexIcmp = 0;
__device__ int totalThreads=0;
*/
#endif  //libAnalysisIpScan

/* Redefine TYPES */
#undef  ANALYSIS_INPUT_TYPE
#define ANALYSIS_INPUT_TYPE COMPOUND_NAME(ANALYSIS_NAME,ipScanAnalysis_t)

#ifdef __CUDACC__

#define $IPSCAN_DETECTOR$AUTO_MINE()\
	do{\
	 if(IS_ETHERNET() && IS_IP4()){\
		 DATA_ELEMENT.headerVertos = GET_FIELD(IP4_HEADER_PTR.headerVertos);\
		 DATA_ELEMENT.ttlprotocol = GET_FIELD(IP4_HEADER_PTR.ttlprotocol);\
		 DATA_ELEMENT.ip_srcFirstHalf = GET_FIELD(IP4_HEADER_PTR.ip_srcFirstHalf);\
		 DATA_ELEMENT.ip_srcSecHalf = GET_FIELD(IP4_HEADER_PTR.ip_srcSecHalf);\
		 DATA_ELEMENT.ip_dstFirstHalf = GET_FIELD(IP4_HEADER_PTR.ip_dstFirstHalf);\
		 DATA_ELEMENT.ip_dstSecHalf = GET_FIELD(IP4_HEADER_PTR.ip_dstSecHalf);\
		 DATA_ELEMENT.version=0;\
		 DATA_ELEMENT.headerLength = IP4_HEADER.headerLength;\
		 DATA_ELEMENT.size_ip = IP4_HEADER.headerLength * 4;\
		 DATA_ELEMENT.ipSrc = GET_FIELD(IP4_HEADER.ip_src);\
		 DATA_ELEMENT.tos = IP4_HEADER.tos;\
		 DATA_ELEMENT.totalLength = GET_FIELD(IP4_HEADER.totalLength);\
		 DATA_ELEMENT.identification = GET_FIELD(IP4_HEADER.identification);\
		 DATA_ELEMENT.flagsAndOffset = GET_FIELD(IP4_HEADER.flagsAndOffset);\
		DATA_ELEMENT.checksum = GET_FIELD(IP4_HEADER.checksum);\
		 DATA_ELEMENT.ipDst = GET_FIELD(IP4_HEADER.ip_dst);\
		 DATA_ELEMENT.protocol = IP4_HEADER.protocol;\
		 DATA_ELEMENT.version = IP4_HEADER.version;\
		 DATA_ELEMENT.indexTcp=0;\
		 DATA_ELEMENT.indexUdp=0;\
		 DATA_ELEMENT.indexIcmp=0;\
		 DATA_ELEMENT.maliciousVer=0;\	
		 DATA_ELEMENT.maliciousIP=0;\
		  		}\
		if(IS_TCP())\
		{\
		DATA_ELEMENT.flags = 0;\	
		DATA_ELEMENT.sport = GET_FIELD(TCP_HEADER.sport);\
		DATA_ELEMENT.dport = GET_FIELD(TCP_HEADER.dport);\	
		DATA_ELEMENT.ack = GET_FIELD(TCP_HEADER.ack);\
		DATA_ELEMENT.flags = TCP_HEADER.flags;\	
		DATA_ELEMENT.unused = TCP_HEADER.unused;\	
		DATA_ELEMENT.offset = TCP_HEADER.offset;\
		DATA_ELEMENT.size_tcp = TCP_HEADER.offset * 4;\
		DATA_ELEMENT.payload = GET_HEADER_POINTERCHAR + 14 + DATA_ELEMENT.size_ip\
								+ DATA_ELEMENT.size_tcp;\
		DATA_ELEMENT.size_payload = DATA_ELEMENT.totalLength - \
		( DATA_ELEMENT.size_ip +  DATA_ELEMENT.size_tcp);\
		DATA_ELEMENT.maliciousReserved = 0;\
		DATA_ELEMENT.maliciousFlags=0;\
		DATA_ELEMENT.maliciousPort=0;\
		}\
}while(0)
	
/***** IPSCAN DETECTOR ANALYSIS *****/
#define $IPSCAN_DETECTOR$ANALYSIS(threshold) \
	COMPOUND_NAME(ANALYSIS_NAME,ipScanAnalysisCode)(GPU_buffer,GPU_data,GPU_results,state,counter,threshold);\
	__syncthreads()

#define SHARED_BUFFER_SIZE MAX_BUFFER_PACKETS/ANALYSIS_TPB

__device__ void print_hex_ascii_line(const u_char *payload, int len, int offset)
{

	int i;
	int gap;
	const u_char *ch;

	/* offset */
	printf("%05d   ", offset);

	/* hex */
	ch = payload;
	for(i = 0; i < len; i++) {
		printf("%02x ", *ch);
		ch++;
		/* print extra space after 8th byte for visual aid */
		if (i == 7)
			printf(" ");
	}
	/* print space to handle line less than 8 bytes */
	if (len < 8)
		printf(" ");

	/* fill hex gap with spaces if not full line */
	if (len < 16) {
		gap = 16 - len;
		for (i = 0; i < gap; i++) {
			printf("   ");
		}
	}
	printf("   ");

	/* ascii (if printable) */
	ch = payload;
	for(i = 0; i < len; i++) {
		if ((*ch)>0x1F && (*ch)<0x7F)
			printf("%c", *ch);
		else
			printf(".");
		ch++;
	}

	printf("\n");
}

template<typename T,typename R> 
__device__  void ipscananalysis(packet_t* GPU_buffer, T* GPU_data, R* GPU_results, analysisState_t state,int *counter,int thresHold){

/* Erases duplicates and counts elements inside block */
	__shared__ T elements[ANALYSIS_TPB];

		//Global Thread Index
		int threadIndex = blockIdx.x*blockDim.x + threadIdx.x;

		//Mine to Shared to save memory accesses
		elements[threadIdx.x] = cudaSafeGet(&GPU_data[threadIndex]);
		//Printing the IP Header by extracting them as 16byte values
		unsigned int octet1,octet2,octet3,octet4,octet1Dst,octet2Dst,octet3Dst,octet4Dst;
		//if(blockIdx.x==0) printf("Source Ip address of the thread with threadId %d in block %d is %" PRIu32 "\n", threadIdx.x,blockIdx.x,elements[threadIdx.x].ipSrc);
		//if(blockIdx.x==0) printf("version number of the thread with threadId %d in block %d is %d \n", threadIdx.x,blockIdx.x,elements[threadIdx.x].version);
		/*Counting the number of TCP, UDP and ICMP Packets */
		if(elements[threadIdx.x].protocol==6) //TCP packet
		{
		atomicAdd(&(GPU_results[0].indexTcp),1);
		}		
		if(elements[threadIdx.x].protocol==0x0011)  //UDP packet
		{
		atomicAdd(&(GPU_results[0].indexUdp),1);
		}
		if(elements[threadIdx.x].protocol==1) //ICMP packet
		{
		atomicAdd(&(GPU_results[0].indexIcmp),1);
		}
		/*Rules for Detecting Malicious IP Packets */
		if(IS_IP4() || IS_IP6())
		{
		/*Checking if the version number in IP Packets is anything other than 4 or 6, 0 is because by default the value is 0*/
		if(elements[threadIdx.x].version!=4 && elements[threadIdx.x].version!=6 && elements[threadIdx.x].version!=0) //Should be Malicious version
		{
		GPU_results[threadIndex].maliciousVer = 1;
		}
		/*Checking if the source or destination IP address is in Private Address range*/
		GPU_results[threadIndex].ipSrc = GPU_data[threadIndex].ipSrc;
		GPU_results[threadIndex].ipDst = GPU_data[threadIndex].ipDst;
		//Checking if the source IP address is in Private Address range
		 uint32_t sourceAddress = elements[threadIdx.x].ipSrc;
		 octet1 = (sourceAddress & 0xff000000) >> 24;
		 octet2 = (sourceAddress & 0x00ff0000) >> 16;
		 octet3 = (sourceAddress & 0x0000ff00) >> 8;
		 octet4 = (sourceAddress & 0x000000ff);
		 uint32_t dstAddress = elements[threadIdx.x].ipDst;
		 octet1Dst = (dstAddress & 0xff000000) >> 24;
		 octet2Dst = (dstAddress & 0x00ff0000) >> 16;
		 octet3Dst = (dstAddress & 0x0000ff00) >> 8;
		 octet4Dst = (dstAddress & 0x000000ff);
		 if (octet1 == 10 || octet1Dst==10)
		 {
        GPU_results[threadIndex].maliciousIP=1;
        }
		
    // 172.16.0.0 - 172.31.255.255
  	  if ((octet1 == 172 || octet1Dst==172) && (octet2 >= 16 || octet2Dst >=16 ) && (octet2 <= 31 || octet2Dst<=31))
  	  {
       GPU_results[threadIndex].maliciousIP=1;
		}
    // 192.168.0.0 - 192.168.255.255
   	 if ((octet1 == 192 || octet1Dst == 192) && (octet2 == 168 || octet2Dst == 168))
   	 {
      GPU_results[threadIndex].maliciousIP=1;
	}
   	 if(IS_IP4())
   	 {
			int result = elements[threadIdx.x].headerVertos + elements[threadIdx.x].ttlprotocol\
			+ elements[threadIdx.x].ip_srcFirstHalf + elements[threadIdx.x].ip_srcSecHalf\
			+ elements[threadIdx.x].ip_dstFirstHalf + elements[threadIdx.x].ip_dstSecHalf\
			+ elements[threadIdx.x].totalLength + elements[threadIdx.x].identification\
			+ elements[threadIdx.x].flagsAndOffset + elements[threadIdx.x].checksum;
			unsigned int sum = ~(result>>16 + (result & 0xFFFF));
			if(sum!=-1) GPU_results[threadIndex].maliciousCheckSum = 1;
   	 }
	
	/*Computing the checksum and checking if the sum is 0*/
	
		 //printf("Source IP address is %u.%u.%u.%u\n",octet1,octet2,octet3,octet4);		
	}
	
	if(IS_TCP())
	{
	/*Checking if TCP Flag bit combination is malicious*/
	if(elements[threadIdx.x].flags == 3 ||
	elements[threadIdx.x].flags == 11 || elements[threadIdx.x].flags == 7 ||
	elements[threadIdx.x].flags == 15 || elements[threadIdx.x].flags == 1 ||
	elements[threadIdx.x].flags == 0 || elements[threadIdx.x].unused != 0)
	{
	GPU_results[threadIndex].flags = GPU_data[threadIndex].flags;
	if(elements[threadIdx.x].unused == 0) GPU_results[threadIndex].maliciousFlags = 1;	
	else GPU_results[threadIndex].maliciousReserved = 1;
	} 	
	
	/*Checking if the source or Destination port is 0*/
	if(elements[threadIdx.x].sport == 0 || elements[threadIdx.x].dport == 0) 
	{
	GPU_results[threadIndex].sport = elements[threadIdx.x].sport;
	GPU_results[threadIndex].dport = elements[threadIdx.x].dport;
	GPU_results[threadIndex].maliciousPort = 1;
	}
	
	/*Checking if the ackowledgement bit is set, than the ACK number should not be zero*/
	if(elements[threadIdx.x].flags & 16 ==1 && elements[threadIdx.x].ack==0)
	GPU_results[threadIndex].maliciousAck=1;
	
	/*Checking if TCP Packet is broadcast packet*/
	if(octet4Dst == 0 || octet4Dst == 255)
	GPU_results[threadIndex].maliciousDst=1;

	//Printing the TCP payload
	if(threadIndex == 0)
	{
		int len = elements[threadIdx.x].size_payload;
		int len_rem = len;
		int line_width = 16;			/* number of bytes per line */
		int line_len;
		int offset = 0;					/* zero-based offset counter */
		const u_char *ch = elements[threadIdx.x].payload;

		if (len <= 0)
			;

		/* data fits on one line */
		else if (len <= line_width) {
			print_hex_ascii_line(ch, len, offset);
		}

		else
		{/* data spans multiple lines */
		for ( ;; ) {
			/* compute current line length */
			line_len = line_width % len_rem;
			/* print line */
			print_hex_ascii_line(ch, line_len, offset);
			/* compute total remaining */
			len_rem = len_rem - line_len;
			/* shift pointer to remaining bytes to print */
			ch = ch + line_len;
			/* add offset */
			offset = offset + line_width;
			/* check if we have line width chars or less */
			if (len_rem <= line_width) {
				/* print last line and get out */
				print_hex_ascii_line(ch, len_rem, offset);
				break;
			}
		}
	}
	}
	}

	__syncthreads();

  // atomicAdd(&totalThreads,1);
}

template<typename T,typename R> 
__device__ __inline__ void COMPOUND_NAME(ANALYSIS_NAME,ipScanAnalysisCode)(packet_t* GPU_buffer, T* GPU_data, R* GPU_results, analysisState_t state,int *counter,int thresHold){

	ipscananalysis<ANALYSIS_INPUT_TYPE,ANALYSIS_INPUT_TYPE>(GPU_buffer,GPU_data,GPU_results,state,counter,thresHold);
	//while(totalThreads<3840) { }; 
	}

/***** END OF PORTSCAN DETECTOR ANALYSIS *****/


#endif //__CUDACC__
/* Redefine DATA_ELEMENT and RESULT_ELEMENT */
#undef DATA_ELEMENT
#define DATA_ELEMENT GPU_data[POS] 

#undef RESULT_ELEMENT
#define RESULT_ELEMENT GPU_results[POS] 



