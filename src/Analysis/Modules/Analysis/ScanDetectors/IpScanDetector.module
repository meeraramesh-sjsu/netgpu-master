/* 
 MODULE:IpScan detector
 TYPE: Analysis

 PrePreprocessor orders (ppp.sh):

 ###PATTERNS $IPSCAN_DETECTOR$ANALYSIS(

 */

//#warning IpScan Analysis
#ifndef libAnalysisIpScan_h 
#define libAnalysisIpScan_h 

#include "../Thresholds/Thresholds.h"
#include <inttypes.h>
#include <string>
#include <stdio.h>
using namespace std;

typedef struct {
	//IP
	int maliciousVer;
	int maliciousIP;
	int maliciousFlags;
	int maliciousReserved;
	int maliciousPort;
	int maliciousAck;
	int maliciousDst;
	int maliciousCheckSum;
	int size_packet;
	int signatureFound;
	char* signature;
	const uint8_t* hexsignature;
	char packet;
	int signatureLength;
} COMPOUND_NAME(ANALYSIS_NAME, ipScanAnalysis_t);

#endif  //libAnalysisIpScan

/* Redefine TYPES */
#undef  ANALYSIS_INPUT_TYPE
#define ANALYSIS_INPUT_TYPE COMPOUND_NAME(ANALYSIS_NAME,ipScanAnalysis_t)

#ifdef __CUDACC__
/*DATA_ELEMENT.packet = (char*) GET_HEADER_POINTERCHAR;\*/
#define $IPSCAN_DETECTOR$AUTO_MINE()\
		do{\
			DATA_ELEMENT.packet = GET_PACKET_BYTE;\
			DATA_ELEMENT.maliciousReserved = 0;\
			DATA_ELEMENT.maliciousFlags=0;\
			DATA_ELEMENT.maliciousPort=0;\
			DATA_ELEMENT.signatureFound=0;\
			DATA_ELEMENT.signature = "0x48656C6C6F";\
			DATA_ELEMENT.signatureLength = 3;\
		}while(0)

/***** IPSCAN DETECTOR ANALYSIS *****/
#define $IPSCAN_DETECTOR$ANALYSIS(threshold) \
		COMPOUND_NAME(ANALYSIS_NAME,ipScanAnalysisCode)(GPU_buffer,GPU_data,GPU_results,state,counter,threshold);\
		__syncthreads()

template<typename T,typename R>
__device__ void ipscananalysis(packet_t* GPU_buffer, T* GPU_data, R* GPU_results, analysisState_t state,int *counter,int thresHold) {

	/* Erases duplicates and counts elements inside block */

	__shared__ T elements[96];
	int threadIndex = blockIdx.x*blockDim.x + threadIdx.x;

	//Mine to Shared to save memory accesses
	elements[threadIdx.x] = cudaSafeGet(&GPU_data[threadIndex]);
	if(blockIdx.x==0)
	{
		if(threadIdx.x==0)
		{
					char ch = elements[threadIdx.x].packet;
					printf("%02x",ch);
						//print_hex_ascii_line(ch, len, offset);
		}
	}
	__syncthreads();

}

template<typename T,typename R>
__device__ __inline__ void COMPOUND_NAME(ANALYSIS_NAME,ipScanAnalysisCode)(packet_t* GPU_buffer, T* GPU_data, R* GPU_results, analysisState_t state,int *counter,int thresHold) {

	ipscananalysis<ANALYSIS_INPUT_TYPE,ANALYSIS_INPUT_TYPE>(GPU_buffer,GPU_data,GPU_results,state,counter,thresHold);
	//while(totalThreads<3840) { };
}

/***** END OF PORTSCAN DETECTOR ANALYSIS *****/

#endif //__CUDACC__
/* Redefine DATA_ELEMENT and RESULT_ELEMENT */
#undef DATA_ELEMENT
#define DATA_ELEMENT GPU_data[POS] 

#undef RESULT_ELEMENT
#define RESULT_ELEMENT GPU_results[POS] 

