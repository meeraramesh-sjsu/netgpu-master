/* 
 MODULE:IpScan detector
 TYPE: Analysis

 PrePreprocessor orders (ppp.sh):

 ###PATTERNS $IPSCAN_DETECTOR$ANALYSIS(

 */

//#warning IpScan Analysis
#ifndef libAnalysisIpScan_h 
#define libAnalysisIpScan_h 

#include "../Thresholds/Thresholds.h"
#include <inttypes.h>
#include <string>
#include <stdio.h>
using namespace std;

typedef struct {
	//IP
	int maliciousVer;
	int maliciousIP;
	int maliciousFlags;
	int maliciousReserved;
	int maliciousPort;
	int maliciousAck;
	int maliciousDst;
	int maliciousCheckSum;
	int size_packet;
	int signatureFound;
	char* signature;
	const uint8_t* hexsignature;
	char* packet;
	int signatureLength;
} COMPOUND_NAME(ANALYSIS_NAME, ipScanAnalysis_t);

#endif  //libAnalysisIpScan

/* Redefine TYPES */
#undef  ANALYSIS_INPUT_TYPE
#define ANALYSIS_INPUT_TYPE COMPOUND_NAME(ANALYSIS_NAME,ipScanAnalysis_t)

#ifdef __CUDACC__
/*DATA_ELEMENT.packet = (char*) GET_HEADER_POINTERCHAR;\*/
#define $IPSCAN_DETECTOR$AUTO_MINE()\
		do{\
			DATA_ELEMENT.packet = (char*) GET_HEADER_POINTERCHAR;\
			DATA_ELEMENT.maliciousReserved = 0;\
			DATA_ELEMENT.maliciousFlags=0;\
			DATA_ELEMENT.maliciousPort=0;\
			DATA_ELEMENT.signatureFound=0;\
			DATA_ELEMENT.signature = "0x48656C6C6F";\
			DATA_ELEMENT.signatureLength = 3;\
		}while(0)

/***** IPSCAN DETECTOR ANALYSIS *****/
#define $IPSCAN_DETECTOR$ANALYSIS(threshold) \
		COMPOUND_NAME(ANALYSIS_NAME,ipScanAnalysisCode)(GPU_buffer,GPU_data,GPU_results,state,counter,threshold);\
		__syncthreads()

__device__ void print_hex_ascii_line(/*const u_*/char /*uint8_t*/ *payload, int len, int offset)
{
	int i;
	int gap;
	/*const u_*/char /*uint8_t*/ *ch;

	/* offset */
	printf("%05d   ", offset);

	/* hex */
	ch = payload;
	//DATA_ELEMENT.hexsignature = 0x48656C6C6F;

	for(i = 0; i < len; i++) {
		printf("%02x ", *ch);
		ch++;
		/* print extra space after 8th byte for visual aid */
		if (i == 7)
			printf(" ");
	}
	/* print space to handle line less than 8 bytes */
	if (len < 8)
		printf(" ");

	/* fill hex gap with spaces if not full line */
	if (len < 16) {
		gap = 16 - len;
		for (i = 0; i < gap; i++) {
			printf("   ");
		}
	}
	printf("   ");

	/* ascii (if printable) */
	ch = payload;
	for(i = 0; i < len; i++) {
		if ((int)(*ch)>0x1F && (int)(*ch)<0x7F)
			printf("%c",*ch);
		else
			printf(".");
		ch++;
	}

	printf("\n");
}

template<typename T,typename R>
__device__ void ipscananalysis(packet_t* GPU_buffer, T* GPU_data, R* GPU_results, analysisState_t state,int *counter,int thresHold) {

	/* Erases duplicates and counts elements inside block */

	__shared__ T elements[96];
	int threadIndex = blockIdx.x*blockDim.x + threadIdx.x;

	//Mine to Shared to save memory accesses
	elements[threadIdx.x] = cudaSafeGet(&GPU_data[threadIndex]);
	if(blockIdx.x==0)
	{
		if(threadIdx.x==0)
		{
			int len_rem = 1;
					int line_width = 16;			/* number of bytes per line */
					int line_len;
					int offset = 0;					/* zero-based offset counter */
					char ch = elements[threadIdx.x].packet[threadIdx.x];
			//
					if (len <= 0)
						;
			//
			//		/* data fits on one line */
					else if (len <= line_width) {
						printf("%02x",ch);
						//print_hex_ascii_line(ch, len, offset);
					}
			//
					else
					{/* data spans multiple lines */
					for ( ;; ) {
						/* compute current line length */
						line_len = line_width % len_rem;
						/* print line */
						print_hex_ascii_line(ch, line_len, offset);
						/* compute total remaining */
						len_rem = len_rem - line_len;
						/* shift pointer to remaining bytes to print */
						ch = ch + line_len;
			//			/* add offset */
						offset = offset + line_width;
			//			/* check if we have line width chars or less */
						if (len_rem <= line_width) {
			//				/* print last line and get out */
							print_hex_ascii_line(ch, len_rem, offset);
							break;
						}
					}
				}
		}
	}
	__syncthreads();

}

template<typename T,typename R>
__device__ __inline__ void COMPOUND_NAME(ANALYSIS_NAME,ipScanAnalysisCode)(packet_t* GPU_buffer, T* GPU_data, R* GPU_results, analysisState_t state,int *counter,int thresHold) {

	ipscananalysis<ANALYSIS_INPUT_TYPE,ANALYSIS_INPUT_TYPE>(GPU_buffer,GPU_data,GPU_results,state,counter,thresHold);
	//while(totalThreads<3840) { };
}

/***** END OF PORTSCAN DETECTOR ANALYSIS *****/

#endif //__CUDACC__
/* Redefine DATA_ELEMENT and RESULT_ELEMENT */
#undef DATA_ELEMENT
#define DATA_ELEMENT GPU_data[POS] 

#undef RESULT_ELEMENT
#define RESULT_ELEMENT GPU_results[POS] 

