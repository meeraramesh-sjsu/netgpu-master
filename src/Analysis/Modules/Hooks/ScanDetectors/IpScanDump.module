/* 
	MODULE:IpScan dumper 
	TYPE: Hook

	PrePreprocessor orders (ppp.sh): 
	###PATTERNS $IPSCAN_DETECTOR$DUMPER$DUMP_ALARMS_TO_FILE( $IPSCAN_DETECTOR$DUMPER$DUMP_ALARMS_TO_STDERR(

 */

//#warning  IpScan Dumper Hook loaded

#include <iostream>
#include <iomanip>
#include <arpa/inet.h>
#include <stdbool.h>
#include <stdio.h>
#include<string>
using namespace std;
#include "../hostTimeUtils.h"

void printFlagBits(int flags)
{
	if(flags&64) cout<<"Congestion Window Reduced ";
	if(flags&32) cout<<"ECN Echo ";
	if(flags&16) cout<<"ACK ";
	if(flags&8) cout<<"PSH(Push) ";
	if(flags&4) cout<<"RST ";
	if(flags&2) cout<<"SYN ";
	if(flags&1) cout<<"FIN ";
	if(flags&0) cout<<"NONE ";
}
#define $IPSCAN_DETECTOR$DUMPER$DUMP_ALARMS_TO_FILE(filename,severe,critical)\
		dumpIpScanAlarmsToFile(packetBuffer,results,state,auxBlocks,(char*)filename,severe,critical)

#define $IPSCAN_DETECTOR$DUMPER$DUMP_ALARMS_TO_STDERR(severe,critical)\
		dumpIpScanAlarmsToOstream(cerr, packetBuffer,results,state,auxBlocks,severe,critical)


template<typename R>
void inline dumpIpScanAlarmsToFile(PacketBuffer* packetBuffer,R* results, analysisState_t state, int64_t* auxBlocks, char* filename,int severeLimit, int criticalLimit){

	//cout<<"TCP = "<<(*results).indexTcp<<"UDP= "<< (*results).indexUdp<<"ICMP ="<< (*results).indexIcmp;
	cout<<endl<<"*********************CPU SECTION***********************************"<<endl;
	//cout<<"TCP = "<<results[0].indexTcp<<"UDP= "<< results[0].indexUdp<<"ICMP = "<< results[0].indexIcmp<<endl;
	bool alreadyExists;
	ofstream file;
	fstream fin;

	//If File does not exist mark flag
	fin.open(filename,ios::in);
	alreadyExists = fin.is_open();
	fin.close();

	//Open
	file.open(filename,ios::out | ios::app);

	//If was empty, fill with headers
	if(!alreadyExists){
		file << "#AutoGenerated Output by"STR(APP_NAME)" IpScanDetector Module"<<endl;
		file << "#Elapsed time format: [ ANALYSIS_START_TIME(timestamp) ANALYSIS_END_TIME(timestamp) ] //At the end list of alarms"<<endl;
		file << "#Alarm Output Format: ANALYSIS_NAME> IP_SOURCE RATE(ips/second) IPS_COUNTER(number of different ips) ALARM_TYPE"<<endl<<endl;
	}

	dumpIpScanAlarmsToOstream(file, packetBuffer,results,state,auxBlocks,severeLimit,criticalLimit);

	//TODO: leave it opened till the end
	file.close();

}

template<typename R>
void inline dumpIpScanAlarmsToOstream(ostream& os, PacketBuffer* packetBuffer,R* results, analysisState_t state, int64_t* auxBlocks, int severeLimit, int criticalLimit){
	int i,j;
	bool hasResults;
	uint8_t* pointer;
	//time vars	
	time_t aux;
	struct tm * timeinfo;
	//Dump alarms
	cout<<"*************Crafted Packets***************"<<endl;
	cout<<setw(10)<<"Source IP address"<<endl;
	int incorrectVerNumber = 0;
	for(i = 0,hasResults = false;i<237;i++){
		uint32_t network_byte_order, network_byte_order1;
		uint32_t some_long;
		struct in_addr in,out;
		if(results[i].ipPacket)
		{
			some_long = results[i].ipSrc;
			network_byte_order = htonl(some_long);
			in.s_addr = network_byte_order;
			some_long = results[i].ipDst;
			network_byte_order1 = htonl(some_long);
			out.s_addr = network_byte_order1;
		}
		//cout<<"Hello inside i loop Hooks"<<state.windowState.totalNumberOfBlocks<<endl;
		for(j=0;j<128;j++)
		{
			// cout<<unsigned(results[i*ANALYSIS_TPB+j].version)<<endl;
			if(results[i*ANALYSIS_TPB+j].maliciousVer == 1)
			{
				incorrectVerNumber++;
				cout<<"Packet with index" << (i*ANALYSIS_TPB+j) << "has incorrect version numer";
				cout<<"From source IP Address";
				cout<<inet_ntoa(in);
				cout<<endl;
			}
			if(results[i*ANALYSIS_TPB+j].maliciousIP == 1)
			{
				cout<<"Packet with index" << (i*ANALYSIS_TPB+j) ;
				cout<<"Alarm!! Src address or Destination address is in private Address range:";
				cout<<"Source IP = " << inet_ntoa(in)<<" ";
				cout<<"Destination IP = " << inet_ntoa(out)<<" ";
				cout<<endl;
			}
			if(results[i*ANALYSIS_TPB+j].maliciousFlags == 1)
			{
				cout<<"Packet with index" << (i*ANALYSIS_TPB+j);
				cout<<"Alarm!! Malicious Flag bit combinations found: i.e ";
				printFlagBits(results[i*ANALYSIS_TPB+j].flags);
				cout<<" are set "<<endl;
			}
			if(results[i*ANALYSIS_TPB+j].maliciousReserved == 1)
			{
				cout<<"Packet with index" << (i*ANALYSIS_TPB+j);
				cout<<"Alarm!! Reserved bits are set, the packet is from src Address:";
				cout<<inet_ntoa(in);
				cout<<endl;
			}
			if(results[i*ANALYSIS_TPB+j].maliciousPort == 1)
			{
				cout<<"Packet with index" << (i*ANALYSIS_TPB+j);
				if(results[i*ANALYSIS_TPB+j].sport==0)
					cout<<"Alarm!! TCP Packet from src Address "<<inet_ntoa(in)<<"has source Port set to zero!";
				else
					cout<<"Alarm!! TCP Packet from src Address"<<inet_ntoa(in)<< "has destination Port set to zero!";
				cout<<endl;
			}
			if(results[i*ANALYSIS_TPB+j].maliciousAck == 1)
			{
				cout<<"Packet with index" << (i*ANALYSIS_TPB+j);
				cout<<"Alarm!! TCP Packet has acknowledgement bit set and ACK number is zero";
				cout<<"Packet from "<<inet_ntoa(in)<<"should be blocked"<<endl;
			}
			if(results[i*ANALYSIS_TPB+j].maliciousDst == 1)
			{
				cout<<"Packet with index" << (i*ANALYSIS_TPB+j);
				cout<<"Alarm!! TCP Broadcast Packet! with address"<<inet_ntoa(out);
				cout<<endl;
			}
			if(results[i*ANALYSIS_TPB+j].maliciousCheckSum == 1)
			{
				cout<<"Packet with index" << (i*ANALYSIS_TPB+j);
				cout<<"Alarm!! The IPv4 Packet has an incorrect checksum and should be discarded"<<endl;
				cout<<"From"<<inet_ntoa(in)<<endl;
			}
			if(results[i*ANALYSIS_TPB+j].signatureFound == 1)
			{
			cout<<"Packet with index" << (i*ANALYSIS_TPB+j);
			cout<<"Malicious signature found in packet ";
			cout<<"From "<<inet_ntoa(in)<<"Malicious signature is"<<endl;
			}
		}
	}

	if(hasResults){
		//Analysis start timestamp (1rst packet)
		os<<"#"STR(ANALYSIS_NAME)"> ";
		os<<"[ "<<tv2usec(state.windowState.windowStartTime)<<" "; 	
		//Seek to supress stupid \n from ctime
		//	os.seekp(ios_base::cur-1);	

		//Analysis end timestamp (last packet)

		os<<tv2usec(state.windowState.windowEndTime)<<" ] ";		

		//Dump current time (time of the dump)
		time ( &aux );
		timeinfo = localtime ( &aux );
		os << " Dumped at: "<<asctime(timeinfo)<<endl<<endl;
	}
	cout<<"Alarm!! There are "<<incorrectVerNumber<<"packets Which have incorrect version Number!"<<endl;

}

