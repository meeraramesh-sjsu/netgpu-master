/* 
	MODULE:Detector dumper 
	TYPE: Hook

	PrePreprocessor orders (ppp.sh): 
	###PATTERNS $DETECTOR$DUMPER$DUMP_ALARMS_TO_FILE(); $DETECTOR$DUMPER$DUMP_ALARMS_TO_STDERR();

*/

//#warning  Detector Dumper Hook loaded

#include <iostream>
#include "../hostTimeUtils.h"

/* FILE DUMPER MACRO */
#define $DETECTOR$DUMPER$PREPARE_TO_DUMP_ALARMS_TO_FILE(filename)\
	{bool alreadyExists;\
	ofstream os;\
	fstream fin;\
	fin.open(filename,ios::in);\
	alreadyExists = fin.is_open();\
	fin.close();\
	os.open(filename,ios::out | ios::app);\
	if(!alreadyExists){\
	        os<< "#AutoGenerated Output by"STR(APP_NAME)" Detector Module"<<endl;\
        	os << "#Detector alarm output(line): ANALYSIS_NAME> USER_TYPE{TYPE1_VALUE TYPE2_VALUE ... TYPEN_VALUE} COUNTER (items in elapsed time)"<<endl;\
/*      	os << "#Total: #ANALYSIS_NAME> Total number of items: NUM_OF_ELEMENTS //At the end list of histogram if counter >0"<<endl;*/\
        	os << "#Elapsed time format: #ANALYSIS_NAME>[ ANALYSIS_START_TIME(timestamp) ANALYSIS_END_TIME(timestamp) ] dumpedTime_ info//At the end list of histogram"<<endl<<endl<<endl;\
	}\
	$DETECTOR$DUMPER$DUMPER()


#define $DETECTOR$DUMPER$DUMP_ALARMS_TO_FILE()\
	os << results[i*ANALYSIS_TPB+j].counter<<endl;\
	}}}\
	$DETECTOR$DUMPER$TIMESTAMPS_DUMPER()\
	os.close();}do{}while(0)

/* STDERR DUMPER MACRO */
#define $DETECTOR$DUMPER$PREPARE_TO_DUMP_ALARMS_TO_STDERR()\
	{ostream& os = cerr;\
	$DETECTOR$DUMPER$DUMPER()

#define $DETECTOR$DUMPER$DUMP_ALARMS_TO_STDERR()\
	os << results[i*ANALYSIS_TPB+j].rate<<" "<< results[i*ANALYSIS_TPB+j].counter<<endl;\
	}}}\
	$DETECTOR$DUMPER$TIMESTAMPS_DUMPER()\
	}do{}while(0)


/* ------------ Common for both dumpers -------------- */


/*DUMPER CODE (common) */
#define $DETECTOR$DUMPER$DUMPER()\
	int i,j;\
	bool hasResults;\
	time_t aux;\
  	struct tm * timeinfo;\
	uint8_t* pointer __attribute__ ((unused));\
	for(i = 0,hasResults = false;i<state.windowState.totalNumberOfBlocks;i++){\
		for(j = 0;j<auxBlocks[i];j++){\
			if(results[i*ANALYSIS_TPB+j].counter != 0.0){\
				hasResults = true;\
				os<<STR(ANALYSIS_NAME)"> "
	
/* TIMESTAMPS DUMPER CODE (common)*/
#define $DETECTOR$DUMPER$TIMESTAMPS_DUMPER()\
	if(hasResults){\
		/*os<<"#"STR(ANALYSIS_NAME)"> Total number of elements: "<<counter<<endl;*/\
		os<<"#"STR(ANALYSIS_NAME)"> ";\
		os<<"[ "<<tv2usec(state.windowState.windowStartTime)<<" ";\
		os<<tv2usec(state.windowState.windowEndTime)<<" ] ";\
		time ( &aux );\
		timeinfo = localtime ( &aux );\
	        os << " Dumped at: "<<asctime(timeinfo)<<endl<<endl;\
	}




/* FIELD DUMPERS (common)*/

//Simple types
#define $DETECTOR$DUMPER$ADD_FIELD()\
	os<<results[i*ANALYSIS_TPB+j].user<<" "

//Special dumpers
#define $DETECTOR$DUMPER$ADD_FIELD_AS_NETMASK()\
	$DETECTOR$DUMPER$ADD_FIELD_AS_IP()

#define $DETECTOR$DUMPER$ADD_FIELD_AS_IP()\
	pointer = (uint8_t*)&results[i*ANALYSIS_TPB+j].user;\
	os<<(unsigned int)*(pointer+3)<<"."<<(unsigned int)*(pointer+2)<<"."<<(unsigned int)*(pointer+1)<<"."<<(unsigned int)*(pointer)<<"" 

//Structure types

#define $DETECTOR$DUMPER$ADD_FIELD_COMPLEX(field)\
	os<<results[i*ANALYSIS_TPB+j].user.field<<" "
//Special dumpers
#define $DETECTOR$DUMPER$ADD_FIELD_AS_NETMASK_COMPLEX(field)\
	$DETECTOR$DUMPER$ADD_FIELD_AS_IP_COMPLEX(field)

#define $DETECTOR$DUMPER$ADD_FIELD_AS_IP_COMPLEX(field)\
	pointer = (uint8_t*)&results[i*ANALYSIS_TPB+j].user.field;\
	os<<(unsigned int)*(pointer+3)<<"."<<(unsigned int)*(pointer+2)<<"."<<(unsigned int)*(pointer+1)<<"."<<(unsigned int)*(pointer)<<" "
