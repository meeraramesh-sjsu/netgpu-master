/* 
	MODULE:IpScan DB dumper 
	TYPE: Hook

	PrePreprocessor orders (ppp.sh):

	###PATTERNS $IPSCAN_DETECTOR$DB_DUMPER$DUMP_ALARMS(

*/

//#warning  IpScan Database Dumper Hook loaded

#include <iostream>
#include <sstream>
#include "../hostTimeUtils.h"

using namespace std;

#define $IPSCAN_DETECTOR$DB_DUMPER$DUMP_ALARMS()\
	$IPSCAN_DETECTOR$DB_DUMPER$DUMP_ALARMS_TO_DBTABLE(STR(ANALYSIS_NAME))
	
//	COMPOUND_NAME(ANALYSIS_NAME,dump_ipscan_alarms_to_db_table)(packetBuffer,results,state,auxBlocks,STR(ANALYSIS_NAME),(float)severe,(float)critical)
/*
template<typename R>
void inline COMPOUND_NAME(ANALYSIS_NAME,dump_ipscan_alarms_to_db_table)(PacketBuffer* packetBuffer,R* results, analysisState_t  state, int64_t* auxBlocks,char* tableName,float severe,float critical){
*/

#define $IPSCAN_DETECTOR$DB_DUMPER$DUMP_ALARMS_TO_DBTABLE(tableName)\
	do{\
		int i,j;\
		bool hasResults;\
		stringstream total;\
		stringstream fixed;\
		static string to_db;\
		fixed <<"INSERT INTO "<<tableName<<" ";\
		stringstream tmp_ids;\
		stringstream tmp_values;\
\
		for(i = 0,hasResults = false;i<state.windowState.totalNumberOfBlocks;i++){\
			for(j = 0;j<auxBlocks[i];j++,total.str(""),tmp_values.str(""),tmp_ids.str("")){\
				if(results[i].rate > 0){\
					hasResults = true;\
					tmp_ids<<"ipsrc, rate, counter,starttime,endtime,dumped";\
					tmp_values<<"CAST("<<results[i*ANALYSIS_TPB+j].ipSrc<<" as bit(32)),"<<results[i*ANALYSIS_TPB+j].rate<<","<<results[i*ANALYSIS_TPB+j].counter<<","<<state.windowState.windowStartTime.tv_sec<<","<<state.windowState.windowEndTime.tv_sec<<",NOW()";\
					total<<fixed.str()<<" ("<<tmp_ids.str()<<") values ("<<tmp_values.str()<<");";\
					to_db =  (total.str());\
					ANALYSIS_NAME::queryManager.scheduleQuery(to_db.c_str());\
				}\
			}\
		}\
		\
		if(hasResults){\
			ANALYSIS_NAME::queryManager.executePackedQuerys();\
		}\
	}while(0)
